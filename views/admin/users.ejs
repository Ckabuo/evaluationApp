<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Users Management - Upperlink</title>
    <link rel="icon" type="image/png" href="/images/upperlink-small-logo.png">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        :root {
            --primary-color: #FFFFFF;
            --secondary-color: #f8f9fa;
            --accent-color: #3641E1;
        }
        
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f8f9fa;
        }
        
        .sidebar {
            background-color: var(--primary-color);
            min-height: 100vh;
            color: #2c3e50;
            padding: 20px;
            position: fixed;
            width: 100%;
            max-width: 280px;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            z-index: 1000;
        }
        
        .sidebar .nav-link {
            color: #2c3e50;
            margin: 5px 0;
            border-radius: 5px;
            padding: 10px 15px;
            white-space: nowrap;
        }
        
        .sidebar .nav-link:hover {
            background-color: var(--secondary-color);
            color: #2c3e50;
        }
        
        .sidebar .nav-link.active {
            background-color: var(--accent-color);
            color: white;
        }

        .nav-links {
            flex: 1;
        }
        
        .main-content {
            padding: 20px;
            margin-left: 280px;
            width: calc(100% - 280px);
        }
        
        .card {
            border: none;
            border-radius: 10px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            margin-bottom: 20px;
        }
        
        .card-header {
            background-color: white;
            border-bottom: 1px solid #eee;
            padding: 15px 20px;
        }
        
        .table {
            margin-bottom: 0;
        }
        
        .table th {
            border-top: none;
            font-weight: 600;
        }

        .search-box {
            max-width: 300px;
        }

        .btn-primary {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
        }
        
        .btn-primary:hover {
            background-color: #2a33b3;
            border-color: #2a33b3;
        }
        
        .btn-outline-primary {
            color: var(--accent-color);
            border-color: var(--accent-color);
        }
        
        .btn-outline-primary:hover {
            background-color: var(--accent-color);
            border-color: var(--accent-color);
        }

        /* Responsive adjustments */
        @media (max-width: 991.98px) {
            .sidebar {
                max-width: 240px;
            }
            .main-content {
                margin-left: 240px;
                width: calc(100% - 240px);
            }
        }

        @media (max-width: 767.98px) {
            .sidebar {
                max-width: 100%;
                transform: translateX(-100%);
                transition: transform 0.3s ease-in-out;
            }
            .sidebar.show {
                transform: translateX(0);
            }
            .main-content {
                margin-left: 0;
                width: 100%;
            }
            .table-responsive {
                overflow-x: auto;
                -webkit-overflow-scrolling: touch;
            }
            .stats-card {
                margin-bottom: 15px;
            }
        }

        /* Add hamburger menu for mobile */
        .navbar-toggler {
            display: none;
            position: fixed;
            top: 15px;
            left: 15px;
            z-index: 1001;
            background-color: var(--accent-color);
            border: none;
            padding: 8px 12px;
            border-radius: 5px;
        }

        @media (max-width: 767.98px) {
            .navbar-toggler {
                display: block;
            }
        }
    </style>
</head>
<body>
    <button class="navbar-toggler" type="button" id="sidebarToggle">
        <i class="bi bi-list text-white"></i>
    </button>
    <div class="container-fluid">
        <div class="row">
            <!-- Sidebar -->
            <div class="col-md-3 col-lg-2 sidebar" id="sidebar">
                <div class="d-flex align-items-center mb-4">
                    <img src="/images/logo.svg" alt="Upperlink Logo" height="40">
                </div>
                <div class="nav-links">
                    <nav class="nav flex-column">
                        <a class="nav-link" href="/admin/dashboard">
                            <i class="bi bi-speedometer2 me-2"></i> Dashboard
                        </a>
                        <a class="nav-link" href="/admin/applicants">
                            <i class="bi bi-people me-2"></i> Applicants
                        </a>
                        <a class="nav-link active" href="/admin/users">
                            <i class="bi bi-person me-2"></i> Users
                        </a>
                        <a class="nav-link" href="/admin/results">
                            <i class="bi bi-graph-up me-2"></i> Results
                        </a>
                        <a class="nav-link" href="/admin/departments">
                            <i class="bi bi-building me-2"></i> Departments
                        </a>
                        <a class="nav-link" href="/admin/questions">
                            <i class="bi bi-question-circle me-2"></i> Questions
                        </a>
                        <a class="nav-link" href="/admin/quiz-settings">
                            <i class="bi bi-gear me-2"></i> Quiz Settings
                        </a>
                    </nav>
                </div>
                <div class="mt-auto pt-4">
                    <a class="nav-link" href="javascript:void(0)" id="logout-btn">
                        <i class="bi bi-box-arrow-right me-2"></i> Logout
                    </a>
                </div>
            </div>

            <!-- Main Content -->
            <div class="col-md-9 col-lg-10 main-content">
                <div class="d-flex justify-content-between align-items-center mb-4">
                    <h2>Users Management</h2>
                    <div class="user-info">
                        <span class="me-2">Welcome, <%= currentUser?.username %></span>
                    </div>
                </div>

                <!-- Search and Filter -->
                <div class="card mb-4">
                    <div class="card-body">
                        <div class="row g-3">
                            <div class="col-md-4">
                                <div class="input-group search-box">
                                    <input type="text" class="form-control" placeholder="Search users..." id="searchInput">
                                    <button class="btn btn-outline-secondary" type="button">
                                        <i class="bi bi-search"></i>
                                    </button>
                                </div>
                            </div>
                            <div class="col-md-3">
                                <select class="form-select" id="roleFilter">
                                    <option value="">All Roles</option>
                                    <option value="admin">Admin</option>
                                    <option value="intern">Intern</option>
                                </select>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Users Table -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">All Users</h5>
                        <span class="badge bg-primary"><%= users.length %> Total</span>
                    </div>
                    <div class="card-body">
                        <div class="table-responsive">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Username</th>
                                        <th>Email</th>
                                        <th>Role</th>
                                        <th>Created At</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <% users.forEach(user => { %>
                                        <tr>
                                            <td><%= user.username %></td>
                                            <td><%= user.email %></td>
                                            <td>
                                                <span class="badge bg-<%= user.status === 1 ? 'primary' : 'info' %>">
                                                    <%= user.status === 1 ? 'Admin' : 'Intern' %>
                                                </span>
                                            </td>
                                            <td><%= new Date(user.createdAt).toLocaleDateString() %></td>
                                            <td>
                                                <button class="btn btn-sm btn-outline-primary view-user" data-id="<%= user._id %>">
                                                    <i class="bi bi-eye"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-warning edit-user" data-id="<%= user._id %>">
                                                    <i class="bi bi-pencil"></i>
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger delete-user" data-id="<%= user._id %>">
                                                    <i class="bi bi-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    <% }); %>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- View User Modal -->
    <div class="modal fade" id="viewUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Details</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <div id="userDetails">
                        <!-- Content will be loaded dynamically -->
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit User Modal -->
    <div class="modal fade" id="editUserModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body">
                    <form id="editUserForm">
                        <input type="hidden" id="editUserId">
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <input type="text" class="form-control" id="editUsername" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Email</label>
                            <input type="email" class="form-control" id="editEmail" required>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Role</label>
                            <select class="form-select" id="editRole" required>
                                <option value="0">Intern</option>
                                <option value="1">Admin</option>
                            </select>
                        </div>
                        <div class="mb-3">
                            <label class="form-label">New Password (leave blank to keep current)</label>
                            <input type="password" class="form-control" id="editPassword">
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveUserChanges">Save Changes</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        // Add sidebar toggle functionality
        document.getElementById('sidebarToggle').addEventListener('click', function() {
            document.getElementById('sidebar').classList.toggle('show');
        });

        // Close sidebar when clicking outside on mobile
        document.addEventListener('click', function(event) {
            const sidebar = document.getElementById('sidebar');
            const sidebarToggle = document.getElementById('sidebarToggle');
            
            if (window.innerWidth <= 767.98 && 
                !sidebar.contains(event.target) && 
                !sidebarToggle.contains(event.target) && 
                sidebar.classList.contains('show')) {
                sidebar.classList.remove('show');
            }
        });

        // Logout functionality
        document.getElementById('logout-btn')?.addEventListener('click', async (e) => {
            e.preventDefault();
            try {
                const res = await fetch('/users/logout', {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    credentials: 'include'
                });
                const data = await res.json();

                if (res.ok) {
                    window.location.href = '/';
                } else {
                    Swal.fire({
                        title: 'Error!',
                        text: data.message || 'Logout failed.',
                        icon: 'error',
                        confirmButtonText: 'OK',
                    });
                }
            } catch (err) {
                Swal.fire({
                    title: 'Error!',
                    text: err.message || 'An error occurred while logging out.',
                    icon: 'error',
                    confirmButtonText: 'OK',
                });
            }
        });

        // Search functionality
        document.getElementById('searchInput').addEventListener('input', function(e) {
            const searchText = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                const text = row.textContent.toLowerCase();
                row.style.display = text.includes(searchText) ? '' : 'none';
            });
        });

        // Role filter
        document.getElementById('roleFilter').addEventListener('change', function(e) {
            const role = e.target.value.toLowerCase();
            const rows = document.querySelectorAll('tbody tr');
            
            rows.forEach(row => {
                if (!role) {
                    row.style.display = '';
                    return;
                }
                
                const roleCell = row.querySelector('td:nth-child(3)');
                const rowRole = roleCell.textContent.toLowerCase();
                row.style.display = rowRole.includes(role) ? '' : 'none';
            });
        });

        // View user details
        const viewModal = new bootstrap.Modal(document.getElementById('viewUserModal'));
        
        document.querySelectorAll('.view-user').forEach(button => {
            button.addEventListener('click', async () => {
                const userId = button.dataset.id;
                try {
                    const response = await fetch(`/admin/users/${userId}`);
                    const data = await response.json();
                    
                    const detailsHtml = `
                        <div class="row">
                            <div class="col-12">
                                <p><strong>Username:</strong> ${data.user.username}</p>
                                <p><strong>Email:</strong> ${data.user.email}</p>
                                <p><strong>Role:</strong> ${data.user.status === 1 ? 'Admin' : 'Intern'}</p>
                                <p><strong>Created At:</strong> ${new Date(data.user.createdAt).toLocaleDateString()}</p>
                            </div>
                        </div>
                    `;
                    
                    document.getElementById('userDetails').innerHTML = detailsHtml;
                    viewModal.show();
                } catch (error) {
                    console.error('Error fetching user details:', error);
                }
            });
        });

        // Edit user
        const editModal = new bootstrap.Modal(document.getElementById('editUserModal'));
        
        document.querySelectorAll('.edit-user').forEach(button => {
            button.addEventListener('click', async () => {
                const userId = button.dataset.id;
                try {
                    const response = await fetch(`/admin/users/${userId}`);
                    const data = await response.json();
                    
                    document.getElementById('editUserId').value = userId;
                    document.getElementById('editUsername').value = data.user.username;
                    document.getElementById('editEmail').value = data.user.email;
                    document.getElementById('editRole').value = data.user.status;
                    document.getElementById('editPassword').value = '';
                    
                    editModal.show();
                } catch (error) {
                    console.error('Error fetching user details:', error);
                }
            });
        });

        // Save user changes
        document.getElementById('saveUserChanges').addEventListener('click', async () => {
            const userId = document.getElementById('editUserId').value;
            const userData = {
                username: document.getElementById('editUsername').value,
                email: document.getElementById('editEmail').value,
                status: parseInt(document.getElementById('editRole').value),
                password: document.getElementById('editPassword').value
            };

            try {
                const response = await fetch(`/admin/users/${userId}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(userData)
                });

                if (response.ok) {
                    location.reload();
                } else {
                    alert('Error updating user');
                }
            } catch (error) {
                console.error('Error updating user:', error);
                alert('Error updating user');
            }
        });

        // Delete user
        document.querySelectorAll('.delete-user').forEach(button => {
            button.addEventListener('click', async () => {
                if (confirm('Are you sure you want to delete this user?')) {
                    const userId = button.dataset.id;
                    try {
                        const response = await fetch(`/admin/users/${userId}`, {
                            method: 'DELETE'
                        });
                        
                        if (response.ok) {
                            button.closest('tr').remove();
                        } else {
                            alert('Error deleting user');
                        }
                    } catch (error) {
                        console.error('Error deleting user:', error);
                        alert('Error deleting user');
                    }
                }
            });
        });
    </script>
</body>
</html> 